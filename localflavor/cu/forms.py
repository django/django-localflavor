# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import re

from django.core.exceptions import ValidationError
from django.core.validators import EMPTY_VALUES
from django.forms import Field, Select, RegexField
from django.utils import six
from django.utils.translation import ugettext as _

from .choices import PROVINCE_CHOICES, PROVINCE_NORMALIZED, REGION_CHOICES, REGION_NORMALIZED
from .validators import CUIdentityCardNumberValidator


class CURegionField(Field):
    """
    A form field for a cuban region.
    The input is validated against a dictionary which includes names and abbreviations.

    It normalizes the input to the standard abbreviation for the given region.
    """

    default_error_messages = {
        'invalid': _('Enter a cuban region.'),
    }

    def clean(self, value):
        super(CURegionField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        try:
            value = value.strip().lower()
        except AttributeError:
            pass
        else:
            try:
                return REGION_NORMALIZED[value.strip().lower()]
            except KeyError:
                pass
        raise ValidationError(self.error_messages['invalid'])


class CURegionSelect(Select):
    """A Select widget that uses a list of cuban regions as its choices."""

    def __init__(self, attrs=None):
        super(CURegionSelect, self).__init__(attrs, choices=REGION_CHOICES)


class CUProvinceField(Field):
    """
    A form field for a cuban province.
    The input is validated against a dictionary which includes names and abbreviations.

    It normalizes the input to the standard abbreviation for the given province.
    """

    default_error_messages = {
        'invalid': _('Enter a cuban province.'),
    }

    def clean(self, value):
        super(CUProvinceField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        try:
            value = value.strip().lower()
        except AttributeError:
            pass
        else:
            try:
                return PROVINCE_NORMALIZED[value.strip().lower()]
            except KeyError:
                pass
        raise ValidationError(self.error_messages['invalid'])


class CUProvinceSelect(Select):
    """A Select widget that uses a list of cuban provinces as its choices."""

    def __init__(self, attrs=None):
        super(CUProvinceSelect, self).__init__(attrs, choices=PROVINCE_CHOICES)


class CUZipCodeField(RegexField):
    """
    A form field for a cuban Zip Code.

    Taken from : http://mapanet.eu/Postal_Codes/?C=CU

    The cuban ZIP code is a combination of 5 digits non begin with 0.
    """

    default_error_messages = {
        'invalid': _('Enter a valid zip code in the format XXXXX.'),
    }

    def __init__(self, *args, **kwargs):
        super(CUZipCodeField, self).__init__(r'^[1-9]\d{4}$', *args, **kwargs)

    def to_python(self, value):
        value = super(CUZipCodeField, self).to_python(value)
        return value.strip()


class CUIdentityCardNumberField(RegexField):
    """
    A form field for a cuban identity card number.

    Taken from : http://www.postdata.club/issues/201609/es-usted-unico-en-cuba.html

    The cuban identity card number is generated by a mathematical algorithm following those rules:
    - Combination of 11 digits.
    - The first 6 digits represents the birthday of the owner.
        -> '%y%m%d' format, ex: `860619`
    - 7th digit represent the century.
        -> 9 for XIX
        -> 0-5 for XX
        -> 6, 7 and 8 for XXI
    - 8th, 9th and 11th aleatory.
    - 10th represent the sex of the owner. Male for the even numbers and Female for odd numbers.
    """

    default_error_messages = {
        'invalid': _('Enter a valid identity card number in the format XXXXXXXXXXX.'),
    }

    def __init__(self, *args, **kwargs):
        super(CUIdentityCardNumberField, self).__init__(r'^\d{11}$', *args, **kwargs)

    def _set_regex(self, regex):
        if isinstance(regex, six.string_types):
            regex = re.compile(regex, re.UNICODE)
        self._regex = regex
        if hasattr(self, '_regex_validator') and self._regex_validator in self.validators:
            self.validators.remove(self._regex_validator)
        self._regex_validator = CUIdentityCardNumberValidator(regex=regex)
        self.validators.append(self._regex_validator)

    def to_python(self, value):
        value = super(CUIdentityCardNumberField, self).to_python(value)
        return value.strip()


class CUPhoneNumberField(RegexField):
    """
    A form field for a cuban phone number.

    Taken from : https://www.directoriocubano.info/

    The cuban phone number is a combination of 8 digits non begin with:
    - 5 for the cell phone numbers.
    - 7 for the capital phone numbers.
    - 4 for Pinar del Río, Artemisa, Mayabeque, Matanzas, Villa Clara, Cienfuegos, Sancti Spiritus and
    Isla de la Juventud
    - 3 for Ciego de Avila, Camaguey and Las Tunas
    - 2 for Holguín, Granma, Santiago de Cuba and Guantánamo
    """

    default_error_messages = {
        'invalid': _('Enter a valid phone number in the format XXXXXXXX.'),
    }

    def __init__(self, *args, **kwargs):
        super(CUPhoneNumberField, self).__init__(r'^[23457]\d{7}$', *args, **kwargs)

    def to_python(self, value):
        value = super(CUPhoneNumberField, self).to_python(value)
        return value.strip()
